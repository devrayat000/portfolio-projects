import ToggleTheme from "$lib/components/buttons/toggle-theme";
import NavbarLink from "$lib/components/links/navlink";
import { createSocketHook } from "$lib/hooks/useSocket";
import {
  AppShell,
  Burger,
  Footer,
  Header,
  Navbar,
  Title,
  useMantineTheme,
  Group,
  createStyles,
  ColorSchemeProvider,
  MantineProvider,
  ColorScheme,
} from "@mantine/core";
import { useBooleanToggle, useHotkeys, useToggle } from "@mantine/hooks";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { getTheme, setTheme } from "styles/theme";
import { Notes, Pencil } from "tabler-icons-react";
import styles from "../styles/Home.module.css";

const useSocket = createSocketHook("http://localhost:1337");

const mockdata = [
  { icon: Notes, label: "Notes", href: "/" },
  { icon: Pencil, label: "Label", href: "/label" },
];

const useStyles = createStyles((theme) => ({
  navRoot: {
    overflowX: "hidden",
    transition: `all ${theme.transitionTimingFunction} 100ms`,
    [`@media (max-width: ${theme.breakpoints.md}px)`]: {
      width: 300,
      minWidth: 300,
    },
  },
  navHidden: {
    [`@media (max-width: ${theme.breakpoints.xl}px)`]: {
      display: "block",
      // transform: "translate(-300px)",
      width: 0,
      minWidth: 0,
      padding: 0,
    },
  },
}));

const HomePage: NextPage<HomePageProps> = () => {
  // const { send, socket } = useSocket({ event: "hello" });
  const {} = useSocket({
    event: "todo_created",
    enabled: true,
    listener(...data: any[]): void {
      console.log(data);
    },
  });
  const [opened, toggle] = useToggle(false, [false, true]);
  const theme = useMantineTheme();
  const { classes } = useStyles();

  const links = mockdata.map((link, index) => (
    <NavbarLink
      {...link}
      key={link.label}
      // active={index === active}
      // onClick={() => setActive(index)}
    />
  ));

  return (
    <AppShell
      // navbarOffsetBreakpoint="sm"
      navbar={
        <Navbar
          p="md"
          hiddenBreakpoint="xl"
          hidden={!opened}
          classNames={{
            root: classes.navRoot,
            hidden: classes.navHidden,
          }}
          // fixed
          width={{ sm: 200, lg: 300 }}
        >
          <Navbar.Section grow>
            <Group direction="column" align="stretch" spacing={2}>
              {links}
            </Group>
          </Navbar.Section>
        </Navbar>
      }
      header={
        <Header height={70} p="md" px={48}>
          <div
            style={{ display: "flex", alignItems: "center", height: "100%" }}
          >
            {/* <MediaQuery largerThan="sm" styles={{ display: "none" }}> */}
            <Burger
              opened={opened}
              onClick={() => toggle()}
              size="sm"
              color={theme.colors.gray[6]}
              mr="xl"
            />
            {/* </MediaQuery> */}

            <Title order={1}>Keeper</Title>
            <div style={{ flexGrow: 1 }} />
            <ToggleTheme />
          </div>
        </Header>
      }
      // footer={
      //   <Footer height={60} p="md">
      //     Application footer
      //   </Footer>
      // }
    >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>
    </AppShell>
  );
};

const ThemeProvider: React.FC<ThemedProps> = ({ theme, ...props }) => {
  const [scheme, setScheme] = useState<ColorScheme>(theme ?? "light");
  const toggleColorScheme = (value?: ColorScheme) => {
    const newScheme = value ?? (scheme === "dark" ? "light" : "dark");
    setScheme(newScheme);
    setTheme(newScheme);
  };

  useHotkeys([["mod+J", () => toggleColorScheme()]]);

  return (
    <ColorSchemeProvider
      colorScheme={scheme}
      toggleColorScheme={toggleColorScheme}
    >
      <MantineProvider
        withGlobalStyles
        withNormalizeCSS
        theme={{
          /** Put your mantine theme override here */
          colorScheme: scheme,
        }}
      >
        <HomePage {...props} />
      </MantineProvider>
    </ColorSchemeProvider>
  );
};

interface HomePageProps {}

interface ThemedProps extends HomePageProps {
  theme?: ColorScheme | null;
}

export default ThemeProvider;

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const theme = getTheme({ req, res });
  console.log(theme);

  return {
    props: { theme },
  };
};
